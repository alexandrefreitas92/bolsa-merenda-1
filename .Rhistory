filter(diferenca > 0) %>%
# Calculo do valor total necessario para complementar a diferenca
summarise(n_diferenca = sum(diferenca > 0),
n_diff_total = sum(diff_1k > 0),
diferenca_media_per_capita = round(mean(diferenca[diferenca > 0]), digits = 2),
diferenca_media_renda_total = round(mean(diff_1k[diff_1k > 0]), digits = 2),
vlr_total_politica_per_capita = sum(diferenca[diferenca > 0]) * 13,
vlr_total_politica_renda_total = sum(diff_1k[diff_1k > 0]) * 13,
vlr_total_programa = vlr_total_politica_per_capita + vlr_total_politica_renda_total) %>%
mutate_if(is.numeric, format, big.mark = ".", decimal.mark = ",")
# Análise síntese
calculo_sintese <- caddom_bh_3 %>%
filter(diferenca > 0 | diff_1k > 0) %>%
# Calculo do valor total necessario para complementar a diferenca
summarise(n_diferenca = sum(diferenca > 0),
n_diff_total = sum(diff_1k > 0),
diferenca_media_per_capita = round(mean(diferenca[diferenca > 0]), digits = 2),
diferenca_media_renda_total = round(mean(diff_1k[diff_1k > 0]), digits = 2),
vlr_total_politica_per_capita = sum(diferenca[diferenca > 0]) * 13,
vlr_total_politica_renda_total = sum(diff_1k[diff_1k > 0]) * 13,
vlr_total_programa = vlr_total_politica_per_capita + vlr_total_politica_renda_total) %>%
mutate_if(is.numeric, format, big.mark = ".", decimal.mark = ",")
# Renda média com PBF
caddom_bh_2 %>%
filter(d.marc_pbf == 1) %>%
summarise(n_familias = n(),
renda_total = mean(renda_total),
media_beneficio = mean(pbf_total))
caddom_bh_2 %>%
summarise(total_pbf = sum(pbf_total)*13)
library(shiny)
# Cad
library(data.table)
library(dplyr)
library(bit64)
a <- read.csv("/home/xedar/Downloads/Lista_Comunitas_3_de_Setembro.csv")
a <- a %>%
mutate(cpf_oficial = as.integer64(cpf_oficial))
cadpes <- fread("/home/xedar/Documents/Trabalho/cad/cad_2020/pessoa.csv", select = c("num_cpf_pessoa", "cd_ibge"))
cadpes <- cadpes %>%
mutate(num_cpf_pessoa = as.integer64(num_cpf_pessoa))
dados <- inner_join(a, cadpes, by = c("cpf_oficial" = "num_cpf_pessoa"))
View(dados)
library(openxlsx)
mg_dados <- read.xlsx("/home/xedar/Documents/Trabalho/mg_dados.xlsx")
View(mg_dados)
mg_dados <- read.xlsx("/home/xedar/Documents/Trabalho/mg_dados.xlsx") %>%
select(Código.IBGE, Município)
dados <- inner_join(a, cadpes, by = c("cpf_oficial" = "num_cpf_pessoa")) %>%
inner_join(mg_dados, by = c("cd_ibge" = "Código.IBGE"))
View(dados)
View(dados)
dados_municipais <- dados %>%
group_by(cd_ibge) %>%
summarise(Município = first(Município),
`Número de Beneficiários` = sum(numero_beneficiarios),
`Número de Familias` = n()
)
View(mg_dados)
View(dados_municipais)
dados_municipais <- dados %>%
group_by(cd_ibge) %>%
summarise(Município = first(Município),
`Número de Beneficiários` = sum(numero_beneficiarios),
`Número de Familias` = n()
) %>%
rename(`Código IBGE` = cd_ibge)
View(dados_municipais)
write.xlsx(dados_municipais, "/home/xedar/Documents/Trabalho/dados_comunitas.xlsx")
dados_municipais %>%
summarise(ben = sum(`Número de Beneficiários`),
fam = sum(`Número de Famílias`))
dados_municipais %>%
summarise(ben = sum(`Número de Beneficiários`),
fam = sum(`Número de Familias`))
library(bit64)
library(googlesheets4)
library(tidyverse)
library(data.table)
library(abjutils)
library(openxlsx)
library(tibble)
library(lubridate)
setwd("/home/xedar/Documents/Trabalho/demanda_clientes/[SEDESE] Dados Educacao")
# Read solicitacoes
solicitacoes <- read.xlsx("/home/xedar/Documents/Trabalho/demanda_clientes/[SEDESE] Dados Educacao/lista_solicitacoes/11.19.Solicitações Bolsa Merenda.xlsx", detectDates = TRUE)
col_names <- colnames(solicitacoes)
col_names <- make.names(col_names, unique = TRUE)
colnames(solicitacoes) <- col_names
## Read db
inicio_julho <- read_sheet("1kPIUC243yhW8-ZEIXyKK4BqkLQTixRDVlzKoPA4ayNc")
agosto <- read_sheet("1u8hmNVmKTN3NLboJFCFQUxNBQm57QCIQVBlFIkyedB0")
# Read solicitacoes
solicitacoes <- read.xlsx("/home/xedar/Documents/Trabalho/demanda_clientes/[SEDESE] Dados Educacao/lista_solicitacoes/11.19.Solicitações Bolsa Merenda.xlsx", detectDates = TRUE)
col_names <- colnames(solicitacoes)
col_names <- make.names(col_names, unique = TRUE)
colnames(solicitacoes) <- col_names
atual_setembro <- read_sheet("1YSdaqkeJhf4H1KVK5znxDTkCVfoQnvQLbWwqha6jeZw")
bolsa_merenda <- inicio_julho %>%
bind_rows(agosto) %>%
bind_rows(atual_setembro)
respostas_bolsa_merenda_2 <- bolsa_merenda %>%
mutate(`Data do email` = substr(`Data do email`, 1, 10),
`Data do email` = as.Date(`Data do email`, format="%Y-%m-%d"),
`Data do email` = as.character(`Data do email`),
ano_nascimento = substr(`Data do nascimento do aluno`, 1, 4),
mes_nascimento = substr(`Data do nascimento do aluno`, 6, 7),
dia_nascimento = substr(`Data do nascimento do aluno`, 9, 10),
`Data do nascimento do aluno` = paste(dia_nascimento, mes_nascimento, ano_nascimento, sep = "-"),
`NIS do responsável familiar` = as.character(`NIS do responsável familiar`),
`CPF do responsável familiar` = as.character(`CPF do responsável familiar`),
`NIS do aluno` = as.character(`NIS do aluno`),
`CPF do aluno` = as.character(`CPF do aluno`),
new_data = "Não"
) %>%
select(-c(ano_nascimento, mes_nascimento, dia_nascimento))
# Clean solicitacoes
solicitacoes <- solicitacoes %>%
mutate(Carimbo.de.data.hora = substr(Carimbo.de.data.hora, 1, 10),
Carimbo.de.data.hora = as.Date(Carimbo.de.data.hora, format="%d-%m-%Y"),
Carimbo.de.data.hora = as.character(Carimbo.de.data.hora)
) %>%
mutate_if(is.numeric, as.character)
### Loop to insert data in data.frame
for (i in 1:nrow(solicitacoes)) {
# Check if data wasn't sent before
if (is.na(solicitacoes$Enviado)[i]) {
# Insert row
row <- c(solicitacoes[i, 1], NA, NA, NA, NA, NA, NA, NA, solicitacoes[i, c(7, 3, 5:6, 8:16, 2)], NA, NA, NA, NA, NA, NA, NA, "Sim")
respostas_bolsa_merenda_2[nrow(respostas_bolsa_merenda_2) + 1,] <- row
# Check for other student
for (j in 1:9) {
multiplicador_aluno = j * 10
if (solicitacoes[i, (7 + multiplicador_aluno)] == "Sim" & !is.na(solicitacoes[i, (7 + multiplicador_aluno)])) {
row <- c(solicitacoes[i, 1], NA, NA, NA, NA, NA, NA, NA, solicitacoes[i, c(7, 3, 5:6, (8 + multiplicador_aluno):(16 + multiplicador_aluno), 2)], NA, NA, NA, NA, NA, NA, NA, "Sim")
respostas_bolsa_merenda_2[nrow(respostas_bolsa_merenda_2) + 1,] <- row
}
}
# Change "Enviado" variable
solicitacoes[i, 107] <- "Sim"
}
}
## Checagem automática
# Retirando espaços e acentos, e convertendo letras em maiúsculas ----
respostas_bolsa_merenda_3 <- respostas_bolsa_merenda_2 %>%
mutate(`Nome do responsável familiar` = str_to_upper(rm_accent(`Nome do responsável familiar`)),
`Nome do aluno matriculado` = str_to_upper(rm_accent(`Nome do aluno matriculado`)),
`Nome do responsável familiar` = str_squish(`Nome do responsável familiar`),
`Nome do aluno matriculado` = str_squish(`Nome do aluno matriculado`),
`Nome da escola` = str_to_upper(rm_accent(`Nome da escola`)),
`Nome da escola` = str_squish(`Nome da escola`),
`CPF do responsável familiar` = as.numeric(`CPF do responsável familiar`),
`CPF do aluno` = as.numeric(`CPF do aluno`))
respostas_bolsa_merenda_3 <- respostas_bolsa_merenda_3 %>%
mutate(`Data do email` = as.Date(`Data do email`, format="%Y-%m-%d"))
# Testando duplicados no R com Duplicidade da planilha ----
respostas_bolsa_merenda_4 <- respostas_bolsa_merenda_3 %>%
mutate(duplicados_var = paste(`Nome do responsável familiar`, `Nome do aluno matriculado`),
duplicados = duplicated(duplicados_var),
duplicados = ifelse(duplicados == TRUE, "Sim", NA))
respostas_bolsa_merenda_4 %>%
count(duplicados)
duplicidade_teste <- respostas_bolsa_merenda_4 %>%
filter(Duplicidade=="Sim")
duplicados_teste <- respostas_bolsa_merenda_4 %>%
filter(duplicados=="Sim")
respostas_bolsa_merenda_filtrados <- respostas_bolsa_merenda_4 %>%
filter(new_data == "Sim") %>%
mutate(Duplicidade = duplicados) %>%
select(-c(duplicados_var, duplicados, new_data)) %>%
arrange(`Data do email`)
# Filtra para o dia da checagem ----
bolsa_merenda_hoje <- respostas_bolsa_merenda_4 %>%
filter(new_data == "Sim") %>%
arrange(`Data do email`) %>%
rename("nis_responsavel" = `NIS do responsável familiar`,
"nis_aluno" = `NIS do aluno`) %>%
mutate(nis_responsavel = ifelse(str_length(nis_responsavel)==13, substr(nis_responsavel, 1, 11), nis_responsavel),
nis_aluno = ifelse(str_length(nis_aluno)==13, substr(nis_aluno, 1, 11), nis_aluno),
nis_responsavel = as.numeric(nis_responsavel),
nis_aluno = as.numeric(nis_aluno),
nis_responsavel = ifelse(is.na(nis_responsavel), 0, nis_responsavel),
nis_aluno = ifelse(is.na(nis_aluno), 0, nis_aluno)) %>%
select(`Data do email`, `Nome do responsável familiar`, nis_responsavel, `CPF do responsável familiar`,
`Nome do aluno matriculado`, `Data do nascimento do aluno`,
nis_aluno, `CPF do aluno`, Duplicidade, duplicados)
# Abrindo e colocando em um objeto os bancos de pessoas e de domicílios ----
cadpes <- fread("/home/xedar/Documents/Trabalho/cad/cad_2020/pessoa.csv", sep = ';',
select = c("p.cod_familiar_fam",
"dta_nasc_pessoa",
"cod_parentesco_rf_pessoa",
"num_nis_pessoa_atual",
"nom_pessoa",
"nom_escola_memb",
"num_cpf_pessoa", "nom_completo_mae_pessoa",
"nom_completo_pai_pessoa"))
caddom <- fread("/home/xedar/Documents/Trabalho/cad/cad_2020/familia.csv", sep = ';',
select = c("d.cod_familiar_fam", "cd_ibge", "d.fx_rfpc",
"cod_local_domic_fam", "d.marc_pbf",
"dat_atual_fam"))
# Juntando os bancos caddom e cadpes para fazer um banco de pessoas e domicílios ----
caddompes <- left_join(cadpes, caddom, by = c("p.cod_familiar_fam" = "d.cod_familiar_fam"))
# Removendo os bancos caddom e cadpes (eles não são mais necessários) ----
rm(cadpes, caddom)
# Selecionando as variáveis de interesse ----
caddompes <- caddompes %>%
select(p.cod_familiar_fam, nom_pessoa, dta_nasc_pessoa, num_nis_pessoa_atual, num_cpf_pessoa,
d.fx_rfpc, cod_parentesco_rf_pessoa, cd_ibge,
d.marc_pbf, nom_escola_memb, dat_atual_fam, nom_completo_mae_pessoa, nom_completo_pai_pessoa)
caddompes <- caddompes %>%
mutate(num_nis_pessoa_atual = as.numeric(num_nis_pessoa_atual),
num_cpf_pessoa = as.numeric(num_cpf_pessoa),
dta_nasc_pessoa = as.Date(dta_nasc_pessoa))
###
# 2. RESPONSÁVEL: Left join com CADDOMPES pelo NIS do Responsável ----
###
banco_responsaveis_1 <- bolsa_merenda_hoje %>%
left_join(caddompes, by = c("nis_responsavel"="num_nis_pessoa_atual"))
# Acrescentando variáveis para verificar dados do responsável ----
banco_responsaveis <- banco_responsaveis_1 %>%
mutate(responsavel_encontrado_pelo_nis = ifelse(is.na(nom_pessoa), "Não encontrado", "Encontrado"),
responsavel_e_responsavel = ifelse(cod_parentesco_rf_pessoa == 1, "Sim", "Não"),
pobre_ou_extremamente_pobre = case_when(d.fx_rfpc <= 2 & responsavel_encontrado_pelo_nis == "Encontrado" ~ "Aprovado",
d.fx_rfpc > 2 & responsavel_encontrado_pelo_nis == "Encontrado" ~ "Reprovado"),
cpf_resp_esta_correto = ifelse(`CPF do responsável familiar`==num_cpf_pessoa & !is.na(num_cpf_pessoa), "Correto", "Incorreto"),
cpf_resp_no_cad = num_cpf_pessoa,
nome_responsavel_esta_correto = ifelse(`Nome do responsável familiar` == nom_pessoa, "Correto", "Incorreto"),
nome_responsavel_no_cad = nom_pessoa)
# ALUNO: Left join com CADDOMPES pelo NIS do aluno ----
banco_responsaveis_alunos <- banco_responsaveis %>%
mutate(nis_aluno = as.numeric(nis_aluno)) %>%
left_join(caddompes, by = c("nis_aluno"="num_nis_pessoa_atual"), suffix = c("_resp", "_aluno"))
banco_responsaveis_alunos <- banco_responsaveis_alunos %>%
select(`Data do email`, `Nome do responsável familiar`, nis_responsavel, `CPF do responsável familiar`,
`Nome do aluno matriculado`, `Data do nascimento do aluno`,
nis_aluno, `CPF do aluno`, Duplicidade, duplicados,
p.cod_familiar_fam_resp, nom_pessoa_resp, dta_nasc_pessoa_resp, num_cpf_pessoa_resp,
d.fx_rfpc_resp, cod_parentesco_rf_pessoa_resp, cd_ibge_resp,
p.cod_familiar_fam_aluno, nom_pessoa_aluno, dta_nasc_pessoa_aluno, num_cpf_pessoa_aluno,
d.fx_rfpc_aluno, cod_parentesco_rf_pessoa_aluno, cd_ibge_aluno, responsavel_encontrado_pelo_nis,
pobre_ou_extremamente_pobre, cpf_resp_esta_correto, cpf_resp_no_cad, nome_responsavel_esta_correto,
nome_responsavel_no_cad, responsavel_e_responsavel)
# Acrescentando variáveis para verificar dados do Aluno ----
banco_responsaveis_alunos <- banco_responsaveis_alunos %>%
mutate(aluno_encontrado_pelo_nis = ifelse(is.na(nom_pessoa_aluno), "Não encontrado", "Encontrado"),
nis_alunos_e_duplicado = ifelse(duplicated(nis_aluno)==TRUE, "Nis duplicados", NA_real_),
resp_e_aluno_tem_mesmo_nis = ifelse(nis_aluno == nis_responsavel &
`Nome do aluno matriculado` != `Nome do responsável familiar`, "Sim", NA_real_),
do_mesmo_nucleo_fam = ifelse(p.cod_familiar_fam_resp == p.cod_familiar_fam_aluno, "Sim", "Não"),
data_de_hoje = as.Date(Sys.Date(), format = "%Y-%m-%d"),
data_nascimento_responsavel = as.Date(dta_nasc_pessoa_resp),
diff_data = difftime(data_de_hoje, data_nascimento_responsavel, units = "days"),
idade_responsavel = diff_data/365,
idade_responsavel = as.integer(idade_responsavel),
responsavel_e_de_maior = ifelse(idade_responsavel>=18, NA_real_, "Não"),
`Data do nascimento do aluno` = as.Date(`Data do nascimento do aluno`),
data_nasc_aluno_esta_correta = ifelse(`Data do nascimento do aluno`==dta_nasc_pessoa_aluno, "Correta", "Incorreta"),
data_nasc_aluno_no_cad = dta_nasc_pessoa_aluno, # colocar as.Date antes de dta_nasc_pessoa_aluno
nome_aluno_esta_correto = ifelse(`Nome do aluno matriculado` == nom_pessoa_aluno, "Correto", "Incorreto"),
nome_aluno_no_cad = nom_pessoa_aluno,
cpf_aluno_esta_correto = case_when(`CPF do aluno`==num_cpf_pessoa_aluno & !is.na(num_cpf_pessoa_aluno) &
!is.na(`CPF do aluno`) ~ "Correto",
is.na(`CPF do aluno`) & !is.na(num_cpf_pessoa_aluno) ~ "Incorreto",
is.na(`CPF do aluno`) & is.na(num_cpf_pessoa_aluno) ~ "Correto",
!is.na(`CPF do aluno`) & is.na(num_cpf_pessoa_aluno) ~ "Correto",
`CPF do aluno`!=num_cpf_pessoa_aluno & !is.na(num_cpf_pessoa_aluno) &
!is.na(`CPF do aluno`) ~ "Incorreto"),
cpf_aluno_no_cad = num_cpf_pessoa_aluno) %>%
select(-data_de_hoje, -data_nascimento_responsavel, -diff_data)
# Abrindo Lista_Beneficiarios_Atualizada ----
# Lista extremamente pobres
lista_beneficiarios_extremamente_pobres <- read_csv("/home/xedar/Documents/Trabalho/demanda_clientes/[SEDESE] Dados Educacao/lista_beneficiarios_bolsa_merenda/Lista_atualizada_alunos_beneficiarios_13 de Novembro.csv")
lista_beneficiarios_extremamente_pobres <- lista_beneficiarios_extremamente_pobres %>%
select(num_nis_pessoa_atual, nom_pessoa, cpf_oficial)
# Lista pobres
lista_beneficiarios_pobres <- read_csv("/home/xedar/Documents/Trabalho/demanda_clientes/[SEDESE] Dados Educacao/lista_beneficiarios_bolsa_merenda/Lista_atualizada_alunos_beneficiarios_pobres_13 de Novembro.csv")
lista_beneficiarios_pobres <- lista_beneficiarios_pobres %>%
select(num_nis_pessoa_atual, nom_pessoa, cpf_oficial) %>%
mutate(cpf_oficial = as.numeric(cpf_oficial))
lista_beneficiarios_geral <- bind_rows(lista_beneficiarios_extremamente_pobres, lista_beneficiarios_pobres)
# Left join com Lista_Beneficiarios_Atualizada pelo NIS do Aluno ----
banco_responsaveis_alunos <- banco_responsaveis_alunos %>%
left_join(lista_beneficiarios_geral, by = c("nis_aluno"="num_nis_pessoa_atual")) %>%
rename("nome_de_aluno_ja_beneficiario"=nom_pessoa)
# Acrescentando variável que avalia se aluno já é beneficiado ----
banco_responsaveis_alunos <- banco_responsaveis_alunos %>%
mutate(aluno_ja_e_beneficiario = ifelse(is.na(nome_de_aluno_ja_beneficiario), "Não", "Sim"))
# Trabalhando com NIS duplicado ----
nis_duplicados <- banco_responsaveis_alunos %>%
filter(nis_alunos_e_duplicado=="Nis duplicados")
nis_duplicados <- nis_duplicados$nis_aluno
# Acrescentando variáveis que checa os casos ----
banco_responsaveis_alunos <- banco_responsaveis_alunos %>%
mutate(nis_alunos_e_duplicado_2 = ifelse(nis_aluno %in% nis_duplicados, "NIS duplicados", NA_real_),
status_sedese = case_when(pobre_ou_extremamente_pobre=="Aprovado" & do_mesmo_nucleo_fam=="Sim" &
aluno_ja_e_beneficiario=="Não" & is.na(nis_alunos_e_duplicado_2) &
is.na(resp_e_aluno_tem_mesmo_nis) &
responsavel_e_responsavel == "Sim" ~ "Aprovado",
pobre_ou_extremamente_pobre=="Aprovado" & do_mesmo_nucleo_fam=="Sim" &
aluno_ja_e_beneficiario=="Sim" ~ "Não se aplica",
pobre_ou_extremamente_pobre=="Reprovado" &
do_mesmo_nucleo_fam=="Sim" ~ "Reprovado"),
justificativa_sedese = case_when(status_sedese == "Reprovado" ~ "Família está acima da faixa de renda do Programa",
status_sedese == "Não se aplica" &
`CPF do responsável familiar` == cpf_oficial ~ "O aluno(a) já é beneficiário",
status_sedese == "Não se aplica" &
`CPF do responsável familiar` != cpf_oficial ~ "Inconsistências no CPF do responsável familiar resolvidas"))
# Número da linha na planilha ----
linhas <- list((nrow(bolsa_merenda) + 2):(nrow(respostas_bolsa_merenda_2) + 1))
linhas_2 <- as.data.frame(linhas)
colnames(linhas_2) <- "numero_da_linha"
banco_responsaveis_alunos <- banco_responsaveis_alunos %>%
bind_cols(linhas_2)
# Selecionando apenas variáveis de interesse e testanto se
# cpf responsavel, nome responsavel, data nascimento aluno, nome aluno, cpf aluno
# estão corretos.
banco_responsaveis_alunos_2 <- banco_responsaveis_alunos %>%
mutate(dados_estao_corretos = case_when(cpf_resp_esta_correto=="Correto" &
nome_responsavel_esta_correto == "Correto" &
data_nasc_aluno_esta_correta == "Correta" &
nome_aluno_esta_correto == "Correto" &
cpf_aluno_esta_correto == "Correto" ~ "Todos os dados corretos"),
status_sedese_2 = status_sedese,
corrigir_erros = case_when(status_sedese == "Aprovado" & is.na(dados_estao_corretos) &
is.na(duplicados) & is.na(nis_alunos_e_duplicado) & is.na(resp_e_aluno_tem_mesmo_nis) &
responsavel_e_responsavel == "Sim" ~ "Corrigir erros",
status_sedese == "Reprovado" | status_sedese == "Não se aplica" | dados_estao_corretos == "Todos os dados corretos" |
duplicados == "Sim" ~ "Não precisa corrigir",
#status_sedese == "Aprovado" & is.na(Duplicidade) & (nis_alunos_e_duplicado_2 == "NIS duplicados" |
#                                                      resp_e_aluno_tem_mesmo_nis == "Sim" |
#                                                      responsavel_e_responsavel == "Não") ~ "Checar todas as informações (Aprovado)",
is.na(status_sedese) & is.na(duplicados) ~ "Checar todas as informações"),
quais_colunas_corrigir = ifelse(corrigir_erros=="Corrigir erros" & cpf_resp_esta_correto=="Incorreto", "CPF Responsável/ ",""),
quais_colunas_corrigir = ifelse(corrigir_erros=="Corrigir erros" & nome_responsavel_esta_correto == "Incorreto",
paste(quais_colunas_corrigir, "Nome Responsável/ "), quais_colunas_corrigir),
quais_colunas_corrigir = ifelse(corrigir_erros=="Corrigir erros" & nome_aluno_esta_correto == "Incorreto",
paste(quais_colunas_corrigir, "Nome do Aluno/ "), quais_colunas_corrigir),
quais_colunas_corrigir = ifelse(corrigir_erros=="Corrigir erros" & cpf_aluno_esta_correto == "Incorreto",
paste(quais_colunas_corrigir, "CPF Aluno/ "), quais_colunas_corrigir),
quais_colunas_corrigir = ifelse(corrigir_erros=="Corrigir erros" & data_nasc_aluno_esta_correta == "Incorreta",
paste(quais_colunas_corrigir,"Data de Nascimento Aluno/ "), quais_colunas_corrigir)) %>%
select(numero_da_linha, `Data do email`, status_sedese, justificativa_sedese, d.fx_rfpc_resp,
corrigir_erros, quais_colunas_corrigir, nis_responsavel, nome_responsavel_no_cad,
nome_aluno_no_cad,
cpf_resp_no_cad,
`CPF do responsável familiar`,
data_nasc_aluno_no_cad,
cpf_aluno_no_cad,
pobre_ou_extremamente_pobre, do_mesmo_nucleo_fam,
aluno_ja_e_beneficiario, responsavel_encontrado_pelo_nis,
aluno_encontrado_pelo_nis, responsavel_e_responsavel,
Duplicidade, duplicados,
nis_alunos_e_duplicado_2, resp_e_aluno_tem_mesmo_nis,
idade_responsavel, responsavel_e_de_maior)
# Fazendo testes no banco final ----
banco_responsaveis_alunos_2 %>%
count(status_sedese, corrigir_erros)
######### IMPORTANTÍSSIMO ############
# Verificar casos de inconsistências no CPF para corrigir ----
inconsistencia_cpf<- banco_responsaveis_alunos_2 %>%
filter(justificativa_sedese=="Inconsistências no CPF do responsável familiar resolvidas")
########  Passar as informações para o df respostas_bolsa_merenda_filtrados
respostas_bolsa_merenda_filtrados <- respostas_bolsa_merenda_filtrados %>%
bind_cols(linhas_2)
colunas_status_e_justificativa <- banco_responsaveis_alunos_2 %>%
select(status_sedese, justificativa_sedese, numero_da_linha, `Data do email`, `CPF do responsável familiar`, d.fx_rfpc_resp)
respostas_bolsa_merenda_filtrados_2 <- respostas_bolsa_merenda_filtrados %>%
inner_join(colunas_status_e_justificativa) %>%
mutate(`Status Sedese` = status_sedese,
`Faixa de Vulnerabilidade` = case_when(d.fx_rfpc_resp == 1 & !is.na(`Status Sedese`) ~ "Extrema Pobreza",
d.fx_rfpc_resp == 2 & !is.na(`Status Sedese`) ~ "Pobreza"),
`Justificativa Sedese` = justificativa_sedese,
`NIS do responsável familiar` = as.numeric(`NIS do responsável familiar`),
`NIS do aluno` = as.numeric(`NIS do aluno`),
`Data do nascimento do aluno` = as.Date(`Data do nascimento do aluno`, format = "%d-%m-%Y"),
ano_email = substr(`Data do email`, 1, 4),
mes_email = substr(`Data do email`, 6, 7),
dia_email = substr(`Data do email`, 9, 10),
`Data do email` = paste(dia_email, mes_email, ano_email, sep = "/"),
ano_nascimento = substr(`Data do nascimento do aluno`, 1, 4),
mes_nascimento = substr(`Data do nascimento do aluno`, 6, 7),
dia_nascimento = substr(`Data do nascimento do aluno`, 9, 10),
`Data do nascimento do aluno` = paste(dia_nascimento, mes_nascimento, ano_nascimento, sep = "/")) %>%
select(-c(numero_da_linha, status_sedese, justificativa_sedese, dia_email, mes_email, ano_email, ano_nascimento, mes_nascimento, dia_nascimento, d.fx_rfpc_resp))
nrow(atual_setembro) + 2
nrow(atual_setembro) + 2 + nrow(bolsa_merenda_hoje)
## Write data to Respostas Bolsa Merenda
range_write("1YSdaqkeJhf4H1KVK5znxDTkCVfoQnvQLbWwqha6jeZw", sheet = 1, respostas_bolsa_merenda_filtrados_2, range = "A1388:AC11510",
col_names = FALSE)
## Write data to Respostas Bolsa Merenda
range_write("1YSdaqkeJhf4H1KVK5znxDTkCVfoQnvQLbWwqha6jeZw", sheet = 1, respostas_bolsa_merenda_filtrados_2, range = "A10388:AC11510",
col_names = FALSE)
View(respostas_bolsa_merenda_filtrados_2)
## Write inconsistências CPF e banco responsaveis
write.xlsx(inconsistencia_cpf, "11.13_inconsistencias_cpf.xlsx", asTable = FALSE)
## Write inconsistências CPF e banco responsaveis
write.xlsx(inconsistencia_cpf, "11.19_inconsistencias_cpf.xlsx", asTable = FALSE)
write.xlsx(banco_responsaveis_alunos_2, "11.19_dados_correcao.xlsx", asTable = FALSE)
## Write data
col_enviados <- solicitacoes %>%
select(Enviado)
range_write("1_0vkgF5bs9J3RniKngcWRsZ7mVjMH-qmoIODp1w7PJA", sheet = 1, col_enviados, range = "DC2:18814",
col_names = FALSE)
## Read db
inicio_julho <- read_sheet("1kPIUC243yhW8-ZEIXyKK4BqkLQTixRDVlzKoPA4ayNc")
agosto <- read_sheet("1u8hmNVmKTN3NLboJFCFQUxNBQm57QCIQVBlFIkyedB0")
atual_setembro <- read_sheet("1YSdaqkeJhf4H1KVK5znxDTkCVfoQnvQLbWwqha6jeZw")
bolsa_merenda <- inicio_julho %>%
bind_rows(agosto) %>%
bind_rows(atual_setembro)
names(bolsa_merenda)
bolsa_merenda %>%
filter(is.na(Duplicidade)) %>%
count(`Status da resposta`)
bolsa_merenda %>%
filter(is.na(Duplicidade) & is.na(`Status da respsota`)) %>%
count(`Status da resposta`)
bolsa_merenda %>%
filter(is.na(Duplicidade) & is.na(`Status do pedido`)) %>%
count(`Status da resposta`)
bolsa_merenda %>%
filter(is.na(Duplicidade) & is.na(`Status sedese`)) %>%
count(`Status da resposta`)
count(`Status Sedese`)
bolsa_merenda %>%
filter(is.na(Duplicidade)) %>%
count(`Status Sedese`)
#sudo systemctl start shiny-server
setwd("/srv/shiny-server/bolsa-merenda")
# Pagamentos - Municipal
pagamentos_alunos_mun <- read_csv("data/dados_por_municipio.csv")
library(shiny)
library(shinydashboard)
library(plotly)
library(DT)
library(tidyverse)
library(openxlsx)
library(sf)
library(abjutils)
library(brazilmaps)
library(geojson)
library(leafletR)
library(rgdal)
library(rjson)
# Pagamentos - Municipal
pagamentos_alunos_mun <- read_csv("data/dados_por_municipio.csv")
View(pagamentos_alunos_mun)
View(pagamentos_alunos_mun)
pobres <- read_csv("/home/xedar/Downloads/Lista_Completa_Bolsa_Merenda_pobres_27 de Novembro.csv")
ext_pobres <- read_csv("/home/xedar/Downloads/Lista_Completa_Bolsa_Merenda_27 de Novembro")
ext_pobres <- read_csv("/home/xedar/Downloads/Lista_Completa_Bolsa_Merenda_27 de Novembro.csv")
View(pobres)
pobres %>%
filter(cpf_oficial == 13466067650)
ext_pobres %>%
filter(cpf_oficial == 13466067650)
View(ext_pobres)
View(pobres)
pobres <- read_csv("/home/xedar/Downloads/Lista_atualizada_alunos_beneficiarios_pobres_27 de Novembro.csv")
ext_pobres <- read_csv("/home/xedar/Downloads/Lista_atualizada_alunos_beneficiarios_27 de Novembro.csv")
View(pobres)
ext_pobres %>%
filter(num_nis_pessoa_atual == 16252299767)
pobres %>%
filter(num_nis_pessoa_atual == 16252299767)
## Read db
inicio_julho <- read_sheet("1kPIUC243yhW8-ZEIXyKK4BqkLQTixRDVlzKoPA4ayNc")
agosto <- read_sheet("1u8hmNVmKTN3NLboJFCFQUxNBQm57QCIQVBlFIkyedB0")
atual_setembro <- read_sheet("1YSdaqkeJhf4H1KVK5znxDTkCVfoQnvQLbWwqha6jeZw")
bolsa_merenda <- inicio_julho %>%
bind_rows(agosto) %>%
bind_rows(atual_setembro)
library(data.table)
library(gmailr)
library(googlesheets4)
library(tidyverse)
library(htmltools)
library(knitr)
library(openxlsx)
## Read db
inicio_julho <- read_sheet("1kPIUC243yhW8-ZEIXyKK4BqkLQTixRDVlzKoPA4ayNc")
agosto <- read_sheet("1u8hmNVmKTN3NLboJFCFQUxNBQm57QCIQVBlFIkyedB0")
atual_setembro <- read_sheet("1YSdaqkeJhf4H1KVK5znxDTkCVfoQnvQLbWwqha6jeZw")
bolsa_merenda <- inicio_julho %>%
bind_rows(agosto) %>%
bind_rows(atual_setembro)
bolsa_merenda %>%
filter(`NIS do aluno` == 16252299767)
View(bolsa_merenda)
cadpes <- fread("/home/xedar/Documents/Trabalho/cad/cad_2020/familia.csv", select = c("d.cod_familiar_fam", "d.fx_rfpc"))
caddom <- fread("/home/xedar/Documents/Trabalho/cad/cad_2020/pessoa.csv", select = c("p.cod_familiar_fam", "nom_pessoa", "num_nis_pessoa_atual"))
caddompes <- left_join(cadpes, caddom, by = c("p.cod_familiar_fam" = "d.cod_familiar_fam"))
caddompes <- left_join(cadpes, caddom, by = c("p.cod_familiar_fam" = "d.cod_familiar_fam"))
caddom <- fread("/home/xedar/Documents/Trabalho/cad/cad_2020/familia.csv", select = c("d.cod_familiar_fam", "d.fx_rfpc"))
cadpes <- fread("/home/xedar/Documents/Trabalho/cad/cad_2020/pessoa.csv", select = c("p.cod_familiar_fam", "nom_pessoa", "num_nis_pessoa_atual"))
caddompes <- left_join(cadpes, caddom, by = c("p.cod_familiar_fam" = "d.cod_familiar_fam"))
caddompes %>%
filter(num_nis_pessoa_atual == 16252299767)
caddompes %>%
filter(p.cod_familiar_fam == 4361353450)
cadpes <- fread("/home/xedar/Documents/Trabalho/cad/cad_2020/pessoa.csv", select = c("p.cod_familiar_fam", "nom_pessoa", "num_nis_pessoa_atual", "num_cpf_pessoa_atual"))
cadpes_n <- fread("/home/xedar/Documents/Trabalho/cad/cad_2020/pessoa.csv", nrows = 1)
names(cadpes_n)
cadpes <- fread("/home/xedar/Documents/Trabalho/cad/cad_2020/pessoa.csv", select = c("p.cod_familiar_fam", "nom_pessoa", "num_nis_pessoa_atual", "num_cpf_pessoa"))
caddom <- fread("/home/xedar/Documents/Trabalho/cad/cad_2020/familia.csv", select = c("d.cod_familiar_fam", "d.fx_rfpc"))
caddompes <- left_join(cadpes, caddom, by = c("p.cod_familiar_fam" = "d.cod_familiar_fam"))
caddompes %>%
filter(p.cod_familiar_fam == 4361353450)
cadpes <- fread("/home/xedar/Documents/Trabalho/cad/cad_2020/pessoa.csv", select = c("p.cod_familiar_fam", "nom_pessoa", "num_nis_pessoa_atual", "num_cpf_pessoa", "dta_nasc_pessoa"))
caddompes <- left_join(cadpes, caddom, by = c("p.cod_familiar_fam" = "d.cod_familiar_fam"))
caddompes %>%
filter(p.cod_familiar_fam == 4361353450)
